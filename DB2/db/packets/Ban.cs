// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace db.packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Ban : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Ban GetRootAsBan(ByteBuffer _bb) { return GetRootAsBan(_bb, new Ban()); }
  public static Ban GetRootAsBan(ByteBuffer _bb, Ban obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyBan(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, BanVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Ban __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MsgId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BanType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Alias { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAliasBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAliasBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAliasArray() { return __p.__vector_as_array<byte>(8); }
  public int Time { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Reason { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReasonBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetReasonBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetReasonArray() { return __p.__vector_as_array<byte>(12); }
  public uint Uid1 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Uid2 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Uid3 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<db.packets.Ban> CreateBan(FlatBufferBuilder builder,
      int msg_id = 0,
      int ban_type = 0,
      StringOffset aliasOffset = default(StringOffset),
      int time = 0,
      StringOffset reasonOffset = default(StringOffset),
      uint uid1 = 0,
      uint uid2 = 0,
      uint uid3 = 0) {
    builder.StartTable(8);
    Ban.AddUid3(builder, uid3);
    Ban.AddUid2(builder, uid2);
    Ban.AddUid1(builder, uid1);
    Ban.AddReason(builder, reasonOffset);
    Ban.AddTime(builder, time);
    Ban.AddAlias(builder, aliasOffset);
    Ban.AddBanType(builder, ban_type);
    Ban.AddMsgId(builder, msg_id);
    return Ban.EndBan(builder);
  }

  public static void StartBan(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddMsgId(FlatBufferBuilder builder, int msgId) { builder.AddInt(0, msgId, 0); }
  public static void AddBanType(FlatBufferBuilder builder, int banType) { builder.AddInt(1, banType, 0); }
  public static void AddAlias(FlatBufferBuilder builder, StringOffset aliasOffset) { builder.AddOffset(2, aliasOffset.Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(3, time, 0); }
  public static void AddReason(FlatBufferBuilder builder, StringOffset reasonOffset) { builder.AddOffset(4, reasonOffset.Value, 0); }
  public static void AddUid1(FlatBufferBuilder builder, uint uid1) { builder.AddUint(5, uid1, 0); }
  public static void AddUid2(FlatBufferBuilder builder, uint uid2) { builder.AddUint(6, uid2, 0); }
  public static void AddUid3(FlatBufferBuilder builder, uint uid3) { builder.AddUint(7, uid3, 0); }
  public static Offset<db.packets.Ban> EndBan(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<db.packets.Ban>(o);
  }
  public static void FinishBanBuffer(FlatBufferBuilder builder, Offset<db.packets.Ban> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBanBuffer(FlatBufferBuilder builder, Offset<db.packets.Ban> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class BanVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MsgId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BanType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Alias*/, false)
      && verifier.VerifyField(tablePos, 10 /*Time*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Reason*/, false)
      && verifier.VerifyField(tablePos, 14 /*Uid1*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Uid2*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Uid3*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
