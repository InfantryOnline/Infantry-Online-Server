// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace db.packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Directory : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Directory GetRootAsDirectory(ByteBuffer _bb) { return GetRootAsDirectory(_bb, new Directory()); }
  public static Directory GetRootAsDirectory(ByteBuffer _bb, Directory obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyDirectory(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, DirectoryVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Directory __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MsgId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public db.packets.DirectoryEntry? DirectoryEntries(int j) { int o = __p.__offset(6); return o != 0 ? (db.packets.DirectoryEntry?)(new db.packets.DirectoryEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DirectoryEntriesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<db.packets.Directory> CreateDirectory(FlatBufferBuilder builder,
      int msg_id = 0,
      VectorOffset directory_entriesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Directory.AddDirectoryEntries(builder, directory_entriesOffset);
    Directory.AddMsgId(builder, msg_id);
    return Directory.EndDirectory(builder);
  }

  public static void StartDirectory(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMsgId(FlatBufferBuilder builder, int msgId) { builder.AddInt(0, msgId, 0); }
  public static void AddDirectoryEntries(FlatBufferBuilder builder, VectorOffset directoryEntriesOffset) { builder.AddOffset(1, directoryEntriesOffset.Value, 0); }
  public static VectorOffset CreateDirectoryEntriesVector(FlatBufferBuilder builder, Offset<db.packets.DirectoryEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDirectoryEntriesVectorBlock(FlatBufferBuilder builder, Offset<db.packets.DirectoryEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDirectoryEntriesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<db.packets.DirectoryEntry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDirectoryEntriesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<db.packets.DirectoryEntry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDirectoryEntriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<db.packets.Directory> EndDirectory(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<db.packets.Directory>(o);
  }
  public static void FinishDirectoryBuffer(FlatBufferBuilder builder, Offset<db.packets.Directory> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDirectoryBuffer(FlatBufferBuilder builder, Offset<db.packets.Directory> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class DirectoryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MsgId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*DirectoryEntries*/, db.packets.DirectoryEntryVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
