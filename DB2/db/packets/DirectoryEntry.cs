// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace db.packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DirectoryEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static DirectoryEntry GetRootAsDirectoryEntry(ByteBuffer _bb) { return GetRootAsDirectoryEntry(_bb, new DirectoryEntry()); }
  public static DirectoryEntry GetRootAsDirectoryEntry(ByteBuffer _bb, DirectoryEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DirectoryEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Ip { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIpBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIpBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIpArray() { return __p.__vector_as_array<byte>(6); }
  public int Port { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(10); }
  public string Description { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public bool IsAdvanced { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint PlayerCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<db.packets.DirectoryEntry> CreateDirectoryEntry(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset ipOffset = default(StringOffset),
      int port = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      bool is_advanced = false,
      uint player_count = 0) {
    builder.StartTable(7);
    DirectoryEntry.AddPlayerCount(builder, player_count);
    DirectoryEntry.AddDescription(builder, descriptionOffset);
    DirectoryEntry.AddTitle(builder, titleOffset);
    DirectoryEntry.AddPort(builder, port);
    DirectoryEntry.AddIp(builder, ipOffset);
    DirectoryEntry.AddName(builder, nameOffset);
    DirectoryEntry.AddIsAdvanced(builder, is_advanced);
    return DirectoryEntry.EndDirectoryEntry(builder);
  }

  public static void StartDirectoryEntry(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddIp(FlatBufferBuilder builder, StringOffset ipOffset) { builder.AddOffset(1, ipOffset.Value, 0); }
  public static void AddPort(FlatBufferBuilder builder, int port) { builder.AddInt(2, port, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(3, titleOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(4, descriptionOffset.Value, 0); }
  public static void AddIsAdvanced(FlatBufferBuilder builder, bool isAdvanced) { builder.AddBool(5, isAdvanced, false); }
  public static void AddPlayerCount(FlatBufferBuilder builder, uint playerCount) { builder.AddUint(6, playerCount, 0); }
  public static Offset<db.packets.DirectoryEntry> EndDirectoryEntry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<db.packets.DirectoryEntry>(o);
  }
}


static public class DirectoryEntryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyString(tablePos, 6 /*Ip*/, false)
      && verifier.VerifyField(tablePos, 8 /*Port*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Title*/, false)
      && verifier.VerifyString(tablePos, 12 /*Description*/, false)
      && verifier.VerifyField(tablePos, 14 /*IsAdvanced*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*PlayerCount*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
