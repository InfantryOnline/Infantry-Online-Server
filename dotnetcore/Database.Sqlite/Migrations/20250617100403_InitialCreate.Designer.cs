// <auto-generated />
using System;
using Database.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Sqlite.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20250617100403_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Database.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("BannerMode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ForumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Permission")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SilencedAtMillisecondsUnix")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SilencedDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ticket")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Database.Alias", b =>
                {
                    b.Property<long>("AliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Stealth")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimePlayed")
                        .HasColumnType("INTEGER");

                    b.HasKey("AliasId");

                    b.HasIndex("AccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Aliases");
                });

            modelBuilder.Entity("Database.Ban", b =>
                {
                    b.Property<long>("BanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Uid1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Uid2")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Uid3")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BanId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("Database.Helpcall", b =>
                {
                    b.Property<long>("HelpCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Arena")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HelpCallId");

                    b.ToTable("Helpcalls");
                });

            modelBuilder.Entity("Database.History", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Arena")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HistoryId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Database.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AliasId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Banner")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Inventory")
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("TEXT");

                    b.Property<short>("Permission")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Skills")
                        .HasColumnType("BLOB");

                    b.Property<long?>("SquadId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId");

                    b.HasIndex("SquadId");

                    b.HasIndex("StatId");

                    b.HasIndex("ZoneId");

                    b.HasIndex("AliasId", "ZoneId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Database.ResetToken", b =>
                {
                    b.Property<long>("ResetTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TokenUsed")
                        .HasColumnType("INTEGER");

                    b.HasKey("ResetTokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("ResetTokens");
                });

            modelBuilder.Entity("Database.Squad", b =>
                {
                    b.Property<long>("SquadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("OwnerPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SquadId");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("Database.Stat", b =>
                {
                    b.Property<long>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssistPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cash")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeathPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KillPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleKills")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat11")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat12")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat9")
                        .HasColumnType("INTEGER");

                    b.HasKey("StatId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("Database.StatsDaily", b =>
                {
                    b.Property<long>("StatsDailyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssistPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeathPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KillPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleKills")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat11")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat12")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat9")
                        .HasColumnType("INTEGER");

                    b.HasKey("StatsDailyId");

                    b.HasIndex("ZoneId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("StatsDailies");
                });

            modelBuilder.Entity("Database.StatsMonthly", b =>
                {
                    b.Property<long>("StatsMonthlyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssistPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeathPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KillPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleKills")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat11")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat12")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat9")
                        .HasColumnType("INTEGER");

                    b.HasKey("StatsMonthlyId");

                    b.HasIndex("ZoneId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("StatsMonthlies");
                });

            modelBuilder.Entity("Database.StatsWeekly", b =>
                {
                    b.Property<long>("StatsWeeklyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssistPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeathPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KillPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleKills")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat11")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat12")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat9")
                        .HasColumnType("INTEGER");

                    b.HasKey("StatsWeeklyId");

                    b.HasIndex("ZoneId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("StatsWeeklies");
                });

            modelBuilder.Entity("Database.StatsYearly", b =>
                {
                    b.Property<long>("StatsYearlyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssistPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeathPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KillPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleKills")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat11")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat12")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Zonestat9")
                        .HasColumnType("INTEGER");

                    b.HasKey("StatsYearlyId");

                    b.HasIndex("ZoneId");

                    b.HasIndex("PlayerId", "Date")
                        .IsUnique();

                    b.ToTable("StatsYearlies");
                });

            modelBuilder.Entity("Database.Zone", b =>
                {
                    b.Property<long>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("Advanced")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Port")
                        .HasColumnType("INTEGER");

                    b.HasKey("ZoneId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Database.Alias", b =>
                {
                    b.HasOne("Database.Account", "AccountNavigation")
                        .WithMany("Aliases")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("Database.Player", b =>
                {
                    b.HasOne("Database.Alias", "AliasNavigation")
                        .WithMany("Players")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Squad", "SquadNavigation")
                        .WithMany("Players")
                        .HasForeignKey("SquadId");

                    b.HasOne("Database.Stat", "StatsNavigation")
                        .WithMany("Players")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Zone", "ZoneNavigation")
                        .WithMany("Players")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AliasNavigation");

                    b.Navigation("SquadNavigation");

                    b.Navigation("StatsNavigation");

                    b.Navigation("ZoneNavigation");
                });

            modelBuilder.Entity("Database.ResetToken", b =>
                {
                    b.HasOne("Database.Account", "AccountNavigation")
                        .WithMany("ResetTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("Database.Stat", b =>
                {
                    b.HasOne("Database.Zone", "ZoneNavigation")
                        .WithMany("Stats")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZoneNavigation");
                });

            modelBuilder.Entity("Database.StatsDaily", b =>
                {
                    b.HasOne("Database.Player", "PlayerNavigation")
                        .WithMany("StatsDailies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Zone", "ZoneNavigation")
                        .WithMany("StatsDailies")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerNavigation");

                    b.Navigation("ZoneNavigation");
                });

            modelBuilder.Entity("Database.StatsMonthly", b =>
                {
                    b.HasOne("Database.Player", "PlayerNavigation")
                        .WithMany("StatsMonthlies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Zone", "ZoneNavigation")
                        .WithMany("StatsMonthlies")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerNavigation");

                    b.Navigation("ZoneNavigation");
                });

            modelBuilder.Entity("Database.StatsWeekly", b =>
                {
                    b.HasOne("Database.Player", "PlayerNavigation")
                        .WithMany("StatsWeeklies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Zone", "ZoneNavigation")
                        .WithMany("StatsWeeklies")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerNavigation");

                    b.Navigation("ZoneNavigation");
                });

            modelBuilder.Entity("Database.StatsYearly", b =>
                {
                    b.HasOne("Database.Player", "PlayerNavigation")
                        .WithMany("StatsYearlies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Zone", "ZoneNavigation")
                        .WithMany("StatsYearlies")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerNavigation");

                    b.Navigation("ZoneNavigation");
                });

            modelBuilder.Entity("Database.Account", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("ResetTokens");
                });

            modelBuilder.Entity("Database.Alias", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Database.Player", b =>
                {
                    b.Navigation("StatsDailies");

                    b.Navigation("StatsMonthlies");

                    b.Navigation("StatsWeeklies");

                    b.Navigation("StatsYearlies");
                });

            modelBuilder.Entity("Database.Squad", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Database.Stat", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Database.Zone", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Stats");

                    b.Navigation("StatsDailies");

                    b.Navigation("StatsMonthlies");

                    b.Navigation("StatsWeeklies");

                    b.Navigation("StatsYearlies");
                });
#pragma warning restore 612, 618
        }
    }
}
